/*
 * -------------------------------------------------
 *  nanowgs Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
// workDir = '/scratch/leuven/302/vsc30235/nextflow'

// Process parameters
params.max_memory          = 128.GB
params.max_cpus            = 6
params.max_time            = 240.h

process {

  cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time   = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries    = 1
  maxErrors     = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time   = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus   = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time   = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time   = { check_max( 72.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time   = { check_max( 20.h * task.attempt, 'time' ) }
  }

  withLabel:minimap {
    container = 'zeunas/minimap2:2.21'
  }
  withLabel:samtools {
    container = 'zeunas/samtools:1.13'
  } 
  withLabel:lra {
    container = 'zeunas/lra:1.3.2'
  }  
  withLabel:cutesv {
    container = 'zeunas/cutesv:1.0.11'
  }
}

// Profiles
profiles {
  debug       { process.beforeScript = 'echo $HOSTNAME' }
  docker      {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.cacheDir = "/staging/leuven/stg_00002/lcb/jdemeul/software/singularity_images/"
  }
}

// Manifest info
manifest {
  name = 'nanowgs'
  author = 'Jonas Demeulemeester'
  homePage = 'https://github.com/jdemeul/nanowgs'
  description = 'A pipeline to analyse Nanopore WGS data'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      // return params.max_cpus as int
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}